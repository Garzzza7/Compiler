module(name,stat) ::= <<
from main import *

<stats(stat)>
>>
stats(stat) ::= <<<if(stat)><stat; separator="\n"><endif> >>
alphabet(stat,name,value) ::= <<
<stats(stat)>
<name> = [ <value; separator=","> ]>>
viewport(value1,value2) ::= <<
window = np.zeros((<value1>+10, <value2>+10, 3), dtype="uint8")
window.fill(100)
vp1 = np.zeros((<value1>, <value2>, 3), dtype="uint8")
vp1.fill(255)
>>
automaton(stat,name) ::= <<
a1 = Automaton()
<stats(stat)>
>>
stateCreation(name) ::= <<
a1.set_state(State('<name>'))
>>
stateAssignment(automata,name,state,value) ::= <<
a1.figures['<name>'].set_type(StateType.<value>)
>>
transitionStatement(name1,name2,symbol) ::= <<
a1.set_transition(LineTransition(a1.figures['<name1>'], a1.figures['<name2>'], ['<symbol; separator="', '">']))
>>
transitionStatementDiff(name1,name2,symbol) ::= <<
a1.set_transition(LoopTransition(a1.figures['<name1>'], ['<symbol; separator="', '">']))
>>
automatonType(name) ::= <<
automatonName = "<name>"
>>
onPause() ::=<<

>>
play(statement) ::= <<
sequence = Sequence(vp1, window)
<statement>
>>
playStatement1(counter) ::= <<
sequence.add(frame<counter>)
>>
playStatement2(statement) ::= <<
sequence.next_step()
>>
binaryExpression(stat,var,e1,op,e2) ::= <<
<stats(stat)>
<decl(var,[e1,op,e2])>
>>
animationDeclaration(counter) ::= <<
frame<counter> = Animation()
>>
OnStatementShowID(symbol,counter) ::= <<
frame<counter>.add_to_show(a1.figures['<symbol>'].set_type(StateType.NORMAL))
>>
OnStatementShowTransitions(symbol,counter) ::= <<
frame<counter>.add_to_show(a1.figures['\<<symbol;separator=",">\>'])
>>
OnStatementShowIDwithChange(symbol,role,value,counter) ::= <<
frame<counter>.add_to_show(a1.figures['<symbol>'].set_type(StateType.<value>))
>>
showGrid(symbol,counter) ::= <<
frame<counter>.add_to_show(<symbol>)>>
foreach(symbol,expr,statement) ::= <<
for <symbol> in ["<expr;separator="\",\"">"]:
    <statement>
>>
foreachStatement(symbol,role,value) ::= <<
a1.figures[<symbol>].set_type(StateType.<value>)
>>
foreachStatement1(symbol,role,value,counter) ::= <<
frame<counter>.add_to_show(a1.figures[i].set_type(StateType.<value>))
>>

decl(var1,var2) ::= "<var1>  <var2>"
test() ::= <<
HELLO
>>
pointView(name) ::= <<
<name> = Point(0.0,0.0)
>>
point(val1,val2) ::= <<
Point(<val1>,<val2>)
>>
expressionView(var,value) ::= <<<var> = <value> >>
placeAssignment(name,expr1,expr2) ::= <<
a1.figures['<name>'].set_position(Point(<expr1>, <expr2>))
>>
ParenthesisExpression(symbol) ::= <<a1.figures['<symbol>'].get_position()>>
pointAssignment(stat,ID,value) ::= <<
<ID> = <value>
<stats(stat)>
>>
ColonExpression(angle,r) ::= <<Point.from_polar(<angle>,<r>)>>
expression(val1,op,val2) ::= <<<val1> <op> <val2> >>
pointModificationView1(symbol1,symbol2,point) ::= <<
a1.set_transition(CustomTransition('\<<symbol1>,<symbol2>\>', [<point;separator=",">], a1.figures['\<<symbol1>,<symbol2>\>'].symbols))
>>
pointModificationView2(symbol1,symbol2,point,align) ::= <<
a1.figures['\<<symbol1>,<symbol2>\>'].labelAlignment = Align.<align>
a1.figures['\<<symbol1>,<symbol2>\>'].labelReferencePoint = <point>
>>
pointModificationView3(symbol1,symbol2,point,align) ::= <<
a1.figures['\<<symbol1>,<symbol2>\>'].labelAlignment = Align.<align>
>>

grid(name,val1,val2,val3,val4,r,g,b,type) ::= <<
<name>=Grid(<val1>, <val2>)
<name>.set_step(<val3>)
<name>.set_margin(<val4>)
<name>.set_color((<r>, <g>, <b>))
<name>.set_line(LineType.<type>)
>>